package com.sgnn7.cpassistant;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;

public class Copier {
	private List<String> sources;
	private String destination;

	public void setSources(List<String> sources) {
		this.sources = sources;
	}

	public List<String> getItemsFromSources() {
		List<String> fileList = new ArrayList<String>(100);
		for (String source : sources) {
			System.out.println("Source: " + source);
			fileList.addAll(getDirectoryTree(source));
		}
		// for (String fileName : fileList) {
		// System.out.println("Path: " + fileName);
		// }
		System.out.println("Files to copy: " + fileList.size());

		return fileList;
	}

	private List<String> getDirectoryTree(String source) {
		List<String> fileList = new ArrayList<String>();
		fileList.add(source);
		File originalPath = new File(source);

		for (File currentSource : originalPath.listFiles()) {
			if (currentSource.isFile()) {
				fileList.add(currentSource.getPath());
			} else if (currentSource.isDirectory()) {
				List<String> directoryTree = getDirectoryTree(currentSource
						.getPath());
				fileList.addAll(directoryTree);
			}
		}
		return fileList;
	}

	public void setDestination(String destination) {
		this.destination = destination;
	}

	public boolean beginCopying(boolean overwriteFiles) throws IOException {
		if (sources.isEmpty() || destination == null || destination.isEmpty()) {
			return false;
		}

		assertDestinationExists(destination);

		List<String> sourceFilenames = getItemsFromSources();
		long startingTime = System.currentTimeMillis();
		int filesDone = 0;
		int totalFiles = sourceFilenames.size();

		for (String sourceFilename : sourceFilenames) {
			File sourceFile = new File(sourceFilename);
			String path = sourceFile.getPath();
			if (path.charAt(1) == ':') {
				path = path.substring(3);
			}

			File targetFile = new File(destination, path);
			if (overwriteFiles || !sourceFile.exists()) {
				try {
					if (sourceFile.isFile()) {
						copyFile(sourceFile, targetFile);
						// sourceFilenames.remove(sourceFilename);
					} else if (sourceFile.isDirectory()) {
						targetFile.mkdirs();
						// sourceFilenames.remove(sourceFilename);
					}
				} catch (Exception e) {
					e.printStackTrace();
					continue;
				}
			}

			filesDone++;
			double percentageDone = filesDone / (double) totalFiles;
			double timeTaken = System.currentTimeMillis() - startingTime;
			timeTaken /= 1000;
			double timePerPercentage = timeTaken / percentageDone;
			double remainingTime = timePerPercentage * (1 - percentageDone);
			
			String output = String.format(
					"%.2f complete. Time: %1d minutes  %02.0f seconds. Remaining: %1d minutes  %02.0f seconds.",
					percentageDone * 100, (int)timeTaken /60, timeTaken % 60, (int)remainingTime / 60,  remainingTime % 60);
			System.out.println(output);
		}

		return filesDone == 0;
	}

	private void assertDestinationExists(String destinationDirectory) {
		File directory = new File(destinationDirectory);
		if (!directory.exists()) {
			directory.mkdirs();
		}

	}

	public static void copyFile(File in, File out) throws IOException {
		FileChannel inChannel = new FileInputStream(in).getChannel();
		FileChannel outChannel = new FileOutputStream(out).getChannel();
		try {
			inChannel.transferTo(0, inChannel.size(), outChannel);
		} catch (IOException e) {
			throw e;
		} finally {
			if (inChannel != null)
				inChannel.close();
			if (outChannel != null)
				outChannel.close();
		}
	}

}
