package com.sgnn7.cpassistant;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class CopierTest {
	private static final String TARGET_STAGING_DIR = "data";
	private Copier testObject;
	private MockCopier mockTestObject;

	@Before
	public void setup() {
		testObject = new Copier();
		testObject.setSources(Arrays.asList(TARGET_STAGING_DIR));
		testObject.setOverwriteFilesEnabled(true);

		mockTestObject = new MockCopier();
		mockTestObject.setSources(Arrays.asList(TARGET_STAGING_DIR));
		mockTestObject.setOverwriteFilesEnabled(true);

		File stagingDir = new File(TARGET_STAGING_DIR);
		stagingDir.delete();
	}
	
	@After
	public void clean(){
		File stagingDir = new File(TARGET_STAGING_DIR);
		stagingDir.delete();
	}

	@Test
	public void folderThatIsAddedGetsExpandedToIncludeAllFiles() {
		List<String> fileObjects = testObject.getItemsFromSources();
		assertEquals(8, fileObjects.size());
	}

	@Test
	public void invokingCopyCopiesAllFilesToTarget() throws Exception {
		String testOutputDirectory = "test-data";
		deleteDirectory(testOutputDirectory);
		testObject.setDestination(testOutputDirectory);
		List<String> result = testObject.beginCopying();
		assertEquals(0, result.size());
		
		testObject.setSources(Arrays.asList(TARGET_STAGING_DIR));
		assertEquals(8, testObject.getItemsFromSources().size());
	}

	@Test
	public void invokingCopyWithABadFileCopiesAllFilesToTargetButReturnsFailure() throws Exception {
		String testOutputDirectory = "test-data";
		deleteDirectory(testOutputDirectory);
		mockTestObject.setDestination(testOutputDirectory);
		
		IOException exception = new IOException("stuffs");
		mockTestObject.failOnFile(Arrays.asList("data\\blah\\abc.txt", "data\\test"), exception);
		
		List<String> result = mockTestObject.beginCopying();
		assertEquals(2, result.size());
		
		mockTestObject.setSources(Arrays.asList(TARGET_STAGING_DIR));
		assertEquals(6, testObject.getItemsFromSources().size());
	}

//	@Test
//	public void copyCrap() throws Exception {
//		testObject.setSources(Arrays.asList("D:\\mp3"));
//		String testOutputDirectory = "Z:\\";
//		testObject.setDestination(testOutputDirectory);
//		boolean result = testObject.beginCopying(true);
//		try {
//			assertTrue(result);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}

	private void deleteDirectory(String testOutputDirectory) {
		File directory = new File(testOutputDirectory);
		directory.delete();
	}
	
	private class MockCopier extends Copier {
		private List<String> failureFilenames;
		private IOException failureException;

		void failOnFile(List<String> filenames, IOException exception){
			this.failureFilenames = filenames;
			this.failureException = exception;
			
		}
		
		@Override
		void copyFile(File in, File out) throws IOException {
			System.err.println("In: " + in.getPath());
			if(failureFilenames.contains(in.getPath())){
				throw failureException;
			}
			
			super.copyFile(in, out);
		}
		
		@Override
		void assertDestinationExists(String destinationDirectory) throws IOException {
			System.err.println("In: " + destinationDirectory);
			if(failureFilenames.contains(destinationDirectory)){
				throw failureException;
			}
			
			super.assertDestinationExists(destinationDirectory);
		}
	}
}
